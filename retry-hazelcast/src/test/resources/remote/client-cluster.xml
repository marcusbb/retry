<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
           xmlns="http://www.hazelcast.com/schema/config"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <group>
        <name>dev</name>
        <password>dev-pass</password>
    </group>
    <network>
        <port auto-increment="false">6801</port>
        <join>
            <multicast enabled="false">
                <multicast-group>226.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
           <tcp-ip enabled="true">
                <interface>127.0.0.1</interface>
                <!-- 
                <interface>10.137.24.34</interface>
                <interface>10.137.20.73</interface>
                 -->
            </tcp-ip>
           
        </join>
        <interfaces enabled="false">
            <interface>10.10.1.*</interface>
        </interfaces>
        
    </network>
    <executor-service>
        <core-pool-size>64</core-pool-size>
        <max-pool-size>264</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>
    <executor-service name="RETRY_INIT" >
        <core-pool-size>2</core-pool-size>
        <max-pool-size>2</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>
    <executor-service name="RETRY_ADD" >
        <core-pool-size>16</core-pool-size>
        <max-pool-size>64</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>
     <executor-service name="RETRY_DEQUEUE" >
        <core-pool-size>10</core-pool-size>
        <max-pool-size>10</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>
    
    <queue name="default">
        <!--
            Maximum size of the queue. When a JVM's local queue size reaches the maximum,
            all put/offer operations will get blocked until the queue size
            of the JVM goes down below the maximum.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size-per-jvm>0</max-size-per-jvm>
        <!--
            Name of the map configuration that will be used for the backing distributed
            map for this queue.
        -->
        <backing-map-ref>default</backing-map-ref>
        <merge-policy>RETRY_MERGE_POLICY</merge-policy>
    </queue>
    <merge-policies>
        <map-merge-policy name="RETRY_MERGE_POLICY">
            <class-name>ies.retry.spi.hazelcast.NetworkMerge</class-name>
        </map-merge-policy>
    </merge-policies>
    <map name="default">
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>1</backup-count>
        <!--
			Maximum number of seconds for each entry to stay in the map. Entries that are
			older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
			will get automatically evicted from the map.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <time-to-live-seconds>0</time-to-live-seconds>
        <!--
			Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <max-idle-seconds>0</max-idle-seconds>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction-policy>NONE</eviction-policy>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size>0</max-size>
        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>
        <!--
            While recovering from split-brain (network partitioning),
            map entries in the small cluster will merge into the bigger cluster
            based on the policy set here. When an entry merge into the
            cluster, there might an existing entry with the same key already.
            Values of these entries might be different for that same key.
            Which value should be set for the key? Conflict is resolved by
            the policy set here. Default policy is hz.ADD_NEW_ENTRY

            There are built-in merge policies such as
            hz.NO_MERGE      ; no entry will merge.
            hz.ADD_NEW_ENTRY ; entry will be added if the merging entry's key
                               doesn't exist in the cluster.
            hz.HIGHER_HITS   ; entry with the higher hits wins.
            hz.LATEST_UPDATE ; entry with the latest update wins.
        -->
        <merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
        
        
    </map>
     <map name="NEAR*">
        
		<near-cache>
            
            <time-to-live-seconds>0</time-to-live-seconds>

            <max-idle-seconds>0</max-idle-seconds>

            <eviction-policy>LRU</eviction-policy>

            <max-size>5000</max-size>

            <invalidate-on-change>true</invalidate-on-change>

        </near-cache>
        
    </map>
   

</hazelcast>